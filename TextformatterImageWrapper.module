<?php

/**
 * ProcessWire Image Wrapper Textformatter
 *
 * This textformatter wraps images with a container and, if so configured, also
 * outputs image descriptions below them as captions.
 *
 * @copyright Copyright (c) 2013-2014, Teppo Koivula
 * @license @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */
class TextformatterImageWrapper extends Textformatter implements ConfigurableModule {

    /**
     * Return module information
     *
     * @return array Module info
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Image Wrapper'), 
            'summary' => __('This module wraps img tags within HTML markup and outputs their descriptions as captions. Recommended for use with TinyMCE or CKEditor fields.'),
            'author' => 'Teppo Koivula',
            'version' => 50,
        );
    }
    
    /**
     * Default configuration settings
     *
     */
    protected static $configDefaults = array(
        'show_captions' => true,
        'markup_wrapper' => '<div class="image_wrap">%s</div>',
        'markup_caption' => '<div class="caption">%s</div>',
        'markup_image' => '<div class="image">%s</div>',
    ); 

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();

    /**
     * Set our configuration defaults
     *
     */
    public function __construct() {
        foreach(self::$configDefaults as $key => $value) {
            $this->set($key, $value); 
        }
    }    

    /**
     * Text formatting function as used by the Textformatter interface
     *
     * Here we look for img tags on first pass using a fast strpos() function. When
     * found, we do our second pass with preg_match_all and wrap those tags.
     *
     * @param string &$str Field content
     */
    public function format(&$str) {

        // fast strpos check for img tags
        if (strpos($str, '<img ') === false) return;

        // comprehensive preg_match_all check + capture matches to $matches
        if (!preg_match_all('/(<p>)?<img.*? alt="(.*?)".*?>(<\/p>)?/si', $str, $matches)) return;

        // iterate over found matches
        foreach($matches[0] as $key => $value) { 

            // caption element it's wrapper
            $caption = "";
            if ($this->show_captions && $matches[2][$key]) {
                $caption = sprintf($this->markup_caption, $matches[2][$key]);
            }

            // image element and it's wrapper
            $original_value = $value;
            if ($matches[1][$key]) $value = substr($value, strlen($matches[1][$key]));
            if ($matches[3][$key]) $value = substr($value, 0, strlen($value)-strlen($matches[3][$key]));
            $image = sprintf($this->markup_image, $value);

            // original wrapper class and new (combined) classes
            $wrapper_class = "";
            if (preg_match('/ class="(.*?)"/si', $this->markup_wrapper, $match)) {
                $wrapper_class = $match[1];
            }
            $class = $wrapper_class;
            if ($caption) $class .= " with_caption";
            if (preg_match('/ class="(.*?)"/si', $value, $match)) {
                $class .= " {$match[1]}";
            }

            // outer wrapper element
            $wrapper = $this->markup_wrapper;
            if ($class) {
                $pattern = $wrapper_class ? '/ class="(.*)"/si' : '/>/';
                $replacement = ' class="' . $class . '"';
                $wrapper = preg_replace($pattern, $replacement, $wrapper, 1);
            }

            // replace original tag ($original_value) with wrapped one ($out)
            $out = sprintf($wrapper, $image . $caption);
            $str = str_replace($original_value, $out, $str); 
        }
    }

    /**
     * Module configuration screen
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public static function getModuleConfigInputfields(array $data) {

        foreach(self::$configDefaults as $key => $value) {
            if(!isset($data[$key])) $data[$key] = $value;
        }

        $fields = new InputfieldWrapper();

        $field = wire('modules')->get('InputfieldCheckbox'); 
        $field->name = 'show_captions';
        $field->value = true;
        if ($data['show_captions']) $field->checked = true;
        $field->label = __('Show captions?'); 
        $field->description = __('When checked, image wrappers will also contain image descriptions.');
        $fields->add($field); 

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'markup_wrapper';
        $field->value = $data[$field->name];
        $field->label = __('Markup for outer wrapper element');
        $field->notes = __('%s is replaced with actual content run-time.');
        $fields->add($field); 
        
        $field = wire('modules')->get('InputfieldText');
        $field->name = 'markup_caption';
        $field->value = $data[$field->name];
        $field->label = __('Markup for caption wrapper element');
        $field->notes = __('%s is replaced with actual content run-time.');
        $fields->add($field); 

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'markup_image';
        $field->value = $data[$field->name];
        $field->label = __('Markup for image wrapper element');
        $field->notes = __('%s is replaced with actual content run-time.');
        $fields->add($field); 

        $field = wire('modules')->get('InputfieldCheckbox'); 
        $field->name = 'show_captions';
        $field->value = true;
        if ($data['show_captions']) $field->checked = true;
        $field->label = __('Show captions?'); 
        $field->description = __('When checked, image wrappers will also contain image descriptions.');
        $fields->add($field); 

        return $fields;
    }

    /**
     * The following functions are to support the ConfigurableModule interface
     * since Textformatter does not originate from WireData
     *
     */

    public function set($key, $value) {
        $this->data[$key] = $value; 
        return $this;
    }

    public function get($key) {
        $value = Wire::getFuel($key); 
        if($value) return $value; 
        return isset($this->data[$key]) ? $this->data[$key] : null;
    }

    public function __set($key, $value) {
        $this->set($key, $value); 
    }

    public function __get($key) {
        return $this->get($key);
    }
    
}